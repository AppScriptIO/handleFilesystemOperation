"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.recursivelySyncFile = recursivelySyncFile;exports.copyFileAndSymlink = copyFileAndSymlink;
var _fs = _interopRequireDefault(require("fs"));
var _util = _interopRequireDefault(require("util"));
var _stream = _interopRequireDefault(require("stream"));

var _mkdirp = require("mkdirp");
var _rsync = _interopRequireDefault(require("rsync"));
var _gulpSize = _interopRequireDefault(require("gulp-size"));

var _vinylFs = require("vinyl-fs");const pipeline = _util.default.promisify(_stream.default.pipeline);




























function recursivelySyncFile({
  source,
  destination,
  copyContentOnly = false,
  extraOption = {} } =
{}) {

  destination = destination.replace(/\/$/, '');

  if (copyContentOnly && _fs.default.lstatSync(source).isDirectory()) {
    source = source.substr(-1) != '/' ? `${source}/` : source;
  } else source.replace(/\/$/, '');

  let options = Object.assign(
  {
    a: true,

    z: true,
    R: false,
    r: true },

  extraOption);


  let rsync = new _rsync.default().
  flags(options).
  patterns([{ action: '-', pattern: '**/node_modules' }]).


  source(source).
  destination(destination);


  return new Promise((resolve, reject) => {
    (0, _mkdirp.sync)(destination);


    let rsyncChildProcess = rsync.execute(
    function (error, code, cmd) {
      console.log(`• command executed: "${cmd}"`);
      if (error) reject(error);
      console.log(`• RSync ${source} to ${destination}`);
      resolve();
    },
    function (data) {
      console.log(' ' + data);
    });

  });
}


async function copyFileAndSymlink({
  source,
  destination })
{
  if (!Array.isArray(source)) source = [source];

  return await pipeline(
  (0, _vinylFs.src)(source, { followSymlinks: false }),

  (0, _vinylFs.dest)(destination, { overwrite: true }),
  (0, _gulpSize.default)({ title: 'copyFileAndSymlink' }));

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,