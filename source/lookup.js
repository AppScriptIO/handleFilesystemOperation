"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.listContentSingleContent = listContentSingleContent;exports.listFileRecursively = listFileRecursively;exports.listFileWithExtension = listFileWithExtension;exports.resolveAndLookupFile = resolveAndLookupFile;exports.listContent = void 0;var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));





const listContent = ({
  dir,
  filelist = [],
  option } =
{}) => {
  if (!Array.isArray(dir)) dir = [dir];

  for (let directoryPath of dir) {
    filelist = filelist.concat(listContentSingleContent({ directoryPath, option }));
  }

  return filelist;
};exports.listContent = listContent;

function listContentSingleContent({
  directoryPath,
  filelist = [],
  option = {
    recursive: false } })

{
  if (!_fs.default.existsSync(directoryPath)) return filelist;
  _fs.default.readdirSync(directoryPath).forEach(content => {
    if (option.recursive) {
      filelist = _fs.default.statSync(_path.default.join(directoryPath, content)).isDirectory() ? listContent(_path.default.join(directoryPath, content), filelist) : filelist.push(content);
    } else {
      filelist.push(content);
    }
  });
  return filelist;
}


function listFileRecursively({ directory, ignoreRegex = [new RegExp(/node_modules/), new RegExp(/.git/)] }) {
  let results = [];
  let list = _fs.default.readdirSync(directory);
  list.forEach(filename => {
    let filepath = _path.default.join(directory, filename);

    let shouldIgnore = ignoreRegex.some(regex => {
      return filepath.match(regex);
    });
    if (shouldIgnore) return;
    let stat;
    try {
      stat = _fs.default.statSync(filepath);
    } catch (error) {
      return;
    }
    if (stat && stat.isDirectory()) results = results.concat(listFileRecursively({ directory: filepath }));else
    results.push({ name: filename, path: filepath });
  });
  return results;
}


function listFileWithExtension({ directory, extension = [], ignoreRegex = [] }) {
  if (!Array.isArray(extension)) extension = [extension];
  return listFileRecursively({ directory }).
  filter(file => {
    let c1 = extension.some(suffix => file.name.substr(-suffix.length) === suffix);
    let c2 = ignoreRegex.some(regex => file.path.match(regex));
    return c1 && !c2;
  }).
  reduce((accumulator, currentValue) => {
    accumulator.push(currentValue.path);
    return accumulator;
  }, []);
}


function resolveAndLookupFile({
  pathArray,
  basePath,
  fileExtension,
  ignoreRegex = [_path.default.join(basePath, 'temporary'), _path.default.join(basePath, 'distribution')] })
{
  pathArray = [...new Set(pathArray)];



  ignoreRegex = ignoreRegex.

  filter(ignore => !pathArray.some(inputPath => inputPath.includes(ignore))).
  map(item => item instanceof RegExp ? item : new RegExp(`${item}`));


  console.log(`• Searching for ${JSON.stringify(fileExtension)} extension files, in path ${JSON.stringify(pathArray)}.`);
  let fileArray = [];
  pathArray.forEach(currentPath => {
    currentPath = !_path.default.isAbsolute(currentPath) ? _path.default.join(basePath, currentPath) : currentPath;
    console.log(`• Test path: ${currentPath}`);
    if (fileExtension.some(extension => currentPath.endsWith(extension))) {

      fileArray.push(currentPath);
    } else {

      let fileList = listFileWithExtension({ directory: currentPath, extension: fileExtension, ignoreRegex });
      fileArray = [...fileArray, ...fileList];
    }
  });

  fileArray = [...new Set(fileArray)];
  return fileArray;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,